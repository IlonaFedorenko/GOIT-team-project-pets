{"version":3,"file":"static/js/644.f0b532ab.chunk.js","mappings":"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","sources":["validation/authValidation.js","webpack://react-homework-template/./src/components/AuthForm/AuthForm.module.css?9658","components/AuthForm/AuthForm.jsx","webpack://react-homework-template/./src/components/Background/Background.module.css?ea01","components/Background/Background.jsx","webpack://react-homework-template/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://react-homework-template/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Section/Section.jsx","pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const registrationValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .nullable()\n    .required('Required')\n    .min(2, 'Name must be at least 2 characters')\n    .max(16, 'Name must be no more than 16 characters')\n    .matches(/^[A-Za-z]+$/, 'Name must contain only letters'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .nullable()\n    .required('Required')\n    .min(6, 'Password must be at least 6 characters')\n    .max(16, 'Password must be no more than 16 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Must be at least one number, one lowercase and uppercase letter'\n    ),\n  confirmPassword: Yup.string()\n    .nullable()\n    .when('password', (password, schema) => {\n      return password\n        ? schema\n            .required('Password confirmation required')\n            .oneOf([Yup.ref('password')], 'Passwords must match')\n        : schema.notRequired();\n    }),\n});\n\nexport const loginValidationSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .nullable()\n    .required('Required')\n    .min(6, 'Password must be at least 6 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Must be at least one number, one lowercase and uppercase letter'\n    ),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthForm_form__N+Fyz\",\"register\":\"AuthForm_register__LBbT3\",\"login\":\"AuthForm_login__nxTrt\",\"inputContainer\":\"AuthForm_inputContainer__44gmQ\",\"title\":\"AuthForm_title__nrVeh\",\"inputWrap\":\"AuthForm_inputWrap__t4Enc\",\"input\":\"AuthForm_input__dB7h2\",\"successInput\":\"AuthForm_successInput__oQ9qy\",\"errorInput\":\"AuthForm_errorInput__Pe3yE\",\"errorWrap\":\"AuthForm_errorWrap__0TYvv\",\"successMessage\":\"AuthForm_successMessage__Vl8si\",\"btnContainer\":\"AuthForm_btnContainer__hf1ao\",\"button\":\"AuthForm_button__+RFEI\",\"text\":\"AuthForm_text__iaP49\",\"link\":\"AuthForm_link__3I+HY\",\"eyeBtn\":\"AuthForm_eyeBtn__6eQZ4\",\"eyeIcon\":\"AuthForm_eyeIcon__4MRzf\",\"crossIcon\":\"AuthForm_crossIcon__ZrnyS\",\"confirmIcon\":\"AuthForm_confirmIcon__GT3ef\"};","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport Button from 'components/Button/Button';\n\nimport {\n  registrationValidationSchema,\n  loginValidationSchema,\n} from './../../validation/authValidation';\n\nimport { GoEyeClosed } from 'react-icons/go';\nimport { GoEye } from 'react-icons/go';\nimport { RxCross2 } from 'react-icons/rx';\nimport { BsCheck } from 'react-icons/bs';\n\nimport css from './AuthForm.module.css';\n\nconst AuthForm = ({ isRegister, onSubmit }) => {\n  const validationSchema = isRegister\n    ? registrationValidationSchema\n    : loginValidationSchema;\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [passworConfirmdVisible, setPasswordConfirmVisible] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const togglePasswordConfirmVisibility = () => {\n    setPasswordConfirmVisible(!passworConfirmdVisible);\n  };\n\n  const clearInput = (fieldName, setFieldValue) => {\n    setFieldValue(fieldName, '');\n  };\n\n  const hasFieldError = (errors, fieldName) => errors[fieldName];\n  const isFieldValid = (errors, fieldName) => !errors[fieldName];\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        confirmPassword: '',\n        ...(isRegister && { name: '' }),\n      }}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting, errors, touched, setFieldValue }) => (\n        <Form\n          className={`${css.form} ${isRegister ? css.register : css.login}`}\n        >\n          <div className={css.inputContainer}>\n            {isRegister ? (\n              <h2 className={css.title}>Registration</h2>\n            ) : (\n              <h2 className={css.title}>Login</h2>\n            )}\n            {isRegister && (\n              <div className={css.inputWrap}>\n                <label htmlFor=\"name\" hidden>\n                  Name\n                </label>\n                <Field\n                  id=\"name\"\n                  type=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  className={`${css.input} ${\n                    touched.name && errors.name && css.errorInput\n                  }`}\n                />\n                {touched.name && hasFieldError(errors, 'name') && (\n                  <RxCross2\n                    id=\"svg\"\n                    className={css.crossIcon}\n                    onClick={() => clearInput('name', setFieldValue)}\n                  />\n                )}\n                {touched.name && isFieldValid(errors, 'name') && (\n                  <BsCheck id=\"svg\" className={css.confirmIcon} />\n                )}\n              </div>\n            )}\n            {touched.name && !errors.name ? (\n              <div className={css.successMessage}>Name is secure</div>\n            ) : (\n              <div className={css.errorWrap}>\n                <ErrorMessage\n                  name=\"name\"\n                  component=\"div\"\n                  className={css.error}\n                />\n              </div>\n            )}\n            <div className={css.inputWrap}>\n              <label htmlFor=\"email\" hidden>\n                Email\n              </label>\n              <Field\n                id=\"email\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                className={`${css.input} ${\n                  touched.email && errors.email && css.errorInput\n                }`}\n              />\n              {touched.email && hasFieldError(errors, 'email') && (\n                <RxCross2\n                  id=\"svg\"\n                  className={css.crossIcon}\n                  onClick={() => clearInput('email', setFieldValue)}\n                />\n              )}\n              {touched.email && isFieldValid(errors, 'email') && (\n                <BsCheck id=\"svg\" className={css.confirmIcon} />\n              )}\n            </div>\n            {touched.email && !errors.email ? (\n              <div className={css.successMessage}>Email is secure</div>\n            ) : (\n              <div className={css.errorWrap}>\n                <ErrorMessage\n                  name=\"email\"\n                  component=\"div\"\n                  className={css.error}\n                />\n              </div>\n            )}\n\n            <div className={css.inputWrap}>\n              <label htmlFor=\"password\" hidden>\n                Password\n              </label>\n              <Field\n                id=\"password\"\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Password\"\n                className={`${css.input} ${\n                  touched.password && !errors.password && css.successInput\n                } ${touched.password && errors.password && css.errorInput}`}\n              />\n              {passwordVisible ? (\n                <button\n                  type=\"button\"\n                  onClick={togglePasswordVisibility}\n                  className={css.eyeBtn}\n                >\n                  <GoEye id=\"svg\" className={css.eyeIcon} />\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  onClick={togglePasswordVisibility}\n                  className={css.eyeBtn}\n                >\n                  <GoEyeClosed id=\"svg\" className={css.eyeIcon} />\n                </button>\n              )}\n              {touched.password && !errors.password ? (\n                <div className={css.successMessage}>Password is secure</div>\n              ) : (\n                <div className={css.errorWrap}>\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className={css.error}\n                  />\n                </div>\n              )}\n            </div>\n            {isRegister && (\n              <div className={css.inputWrap}>\n                <label htmlFor=\"confirmPassword\" hidden>\n                  Confirm password\n                </label>\n                <Field\n                  id=\"confirmPassword\"\n                  type={passworConfirmdVisible ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  className={`${css.input} ${\n                    touched.confirmPassword &&\n                    !errors.confirmPassword &&\n                    css.successInput\n                  } ${\n                    touched.confirmPassword &&\n                    errors.confirmPassword &&\n                    css.errorInput\n                  }`}\n                />\n                {passworConfirmdVisible ? (\n                  <button\n                    type=\"button\"\n                    onClick={togglePasswordConfirmVisibility}\n                    className={css.eyeBtn}\n                  >\n                    <GoEye id=\"svg\" className={css.eyeIcon} />\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={togglePasswordConfirmVisibility}\n                    className={css.eyeBtn}\n                  >\n                    <GoEyeClosed id=\"svg\" className={css.eyeIcon} />\n                  </button>\n                )}\n                {touched.confirmPassword && !errors.confirmPassword ? (\n                  <div className={css.successMessage}>Password confirmed</div>\n                ) : (\n                  <div className={css.errorWrap}>\n                    <ErrorMessage\n                      name=\"confirmPassword\"\n                      component=\"div\"\n                      className={css.error}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <div className={css.btnContainer}>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className={css.button}\n            >\n              {isRegister ? 'Registration' : 'Login'}\n            </Button>\n            {isRegister ? (\n              <p className={css.text}>\n                Already have an account?{' '}\n                <Link to=\"/login\" className={css.link}>\n                  Login\n                </Link>\n              </p>\n            ) : (\n              <p className={css.text}>\n                Don't have an account?{' '}\n                <Link to=\"/register\" className={css.link}>\n                  Register\n                </Link>\n              </p>\n            )}\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default AuthForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"Background_background__WcKDH\"};","import React from 'react';\n\nimport css from './Background.module.css';\n\nconst Background = () => {\n  return <div className={css.background}></div>;\n};\n\nexport default Background;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__wiIYs\"};","import React from 'react';\n\nimport css from './Button.module.css';\n\nconst Button = ({ children, className, onClick, type, ...props }) => {\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      className={`${css.button} ${className} `}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__VVOCq\"};","import { PropTypes } from 'prop-types';\nimport css from './Container.module.css';\n\nconst Container = ({ children, className }) => {\n  return <div className={`${css.container} ${className}`}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { PropTypes } from 'prop-types';\nimport css from './Section.module.css';\n\nconst Section = ({ children, className }) => {\n  return <div className={`${css.section} ${className}`}>{children}</div>;\n};\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport Background from 'components/Background/Background';\nimport AuthForm from 'components/AuthForm/AuthForm';\nimport Section from 'components/Section/Section';\nimport Container from 'components/Container/Container';\n// import ModalCongrats from 'components/ModalCongrats/ModalCongrats'; // Імпортуємо модалку\nimport { signup } from 'redux/auth/auth-operations';\nimport { isLoading, checkError } from 'redux/auth/auth-selectors';\n\nimport css from '../../components/Section/Section.module.css';\n\nexport const RegisterPage = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const error = useSelector(checkError);\n  const [submissionError, setSubmissionError] = useState(null);\n  // const [showModal, setShowModal] = useState(false); // Додали стан showModal\n\n  const handleSubmit = async ({ email, password, name }, { setSubmitting }) => {\n    const data = { email, password, name };\n    console.log(email, password, name);\n    try {\n      await dispatch(signup(data));\n      // setShowModal(true); // Вказуємо, що модалку потрібно показати після успішної реєстрації\n      navigate('/user', { state: { from: '/register' } });\n    } catch (error) {\n      setSubmissionError(error);\n      console.log('Something went wrong', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (loading && !error) {\n    // return <Loader />;\n  }\n\n  return (\n    <Section className={css.sectionRegister}>\n      <Background />\n      <Container>\n        <AuthForm isRegister onSubmit={handleSubmit} />\n        {submissionError && <div>Error: {submissionError.message}</div>}\n        {/* {showModal && (\n          <ModalCongrats onClose={() => setShowModal(false)} />\n        )}{' '} */}\n        {/* Показуємо модалку, якщо showModal === true */}\n      </Container>\n    </Section>\n  );\n};\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"sectionlogin\":\"Section_sectionlogin__Bu46X\",\"sectionRegister\":\"Section_sectionRegister__aDA4N\"};"],"names":["registrationValidationSchema","Yup","shape","name","nullable","required","min","max","matches","email","password","confirmPassword","when","schema","oneOf","notRequired","loginValidationSchema","_ref","isRegister","onSubmit","validationSchema","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","passworConfirmdVisible","setPasswordConfirmVisible","togglePasswordVisibility","togglePasswordConfirmVisibility","clearInput","fieldName","setFieldValue","hasFieldError","errors","isFieldValid","_jsx","Formik","initialValues","_objectSpread","children","_ref2","isSubmitting","touched","_jsxs","Form","className","concat","css","htmlFor","hidden","Field","id","type","placeholder","RxCross2","onClick","BsCheck","ErrorMessage","component","GoEye","GoEyeClosed","Button","disabled","Link","to","_objectWithoutProperties","_excluded","navigate","useNavigate","dispatch","useDispatch","useSelector","isLoading","checkError","submissionError","setSubmissionError","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setSubmitting","data","wrap","_context","prev","next","console","log","signup","state","from","t0","finish","stop","_x","_x2","apply","arguments","Section","Background","Container","AuthForm","message"],"sourceRoot":""}